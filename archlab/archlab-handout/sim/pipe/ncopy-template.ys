#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Boyuan Chen 2200017816
# Describe how and why you modified the baseline code.
# 1. add iaddq instruction in pipe-full.hcl
# 2. using load forwarding 
# 3. using 8-road expansion+rem specal management
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
            # count = 0;
    iaddq $-8, %rdx
    jl  Less8
Loop: 
    mrmovq (%rdi), %r10 # read val from src...
    rmmovq %r10, (%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L1
    iaddq $1, %rax     
L1:
    mrmovq 8(%rdi), %r10 # read val from src...
    rmmovq %r10, 8(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L2
    iaddq $1, %rax  
L2:
    mrmovq 16(%rdi), %r10 # read val from src...
    rmmovq %r10, 16(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L3
    iaddq $1, %rax  
L3:
    mrmovq 24(%rdi), %r10 # read val from src...
    rmmovq %r10, 24(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L4
    iaddq $1, %rax  
L4:
    mrmovq 32(%rdi), %r10 # read val from src...
    rmmovq %r10, 32(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L5
    iaddq $1, %rax  
L5:
    mrmovq 40(%rdi), %r10 # read val from src...
    rmmovq %r10, 40(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L6
    iaddq $1, %rax  
L6:
    mrmovq 48(%rdi), %r10 # read val from src...
    rmmovq %r10, 48(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle L7
    iaddq $1, %rax  
L7:
    mrmovq 56(%rdi), %r10 # read val from src...
    rmmovq %r10, 56(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Test
    iaddq $1, %rax  
Test:
    iaddq $64, %rdi         # src+=8
    iaddq $64, %rsi         # dst+=8
    iaddq $-8, %rdx         # len-=8
    jge Loop                # if so, goto Loop:
Less8:
    iaddq $4, %rdx
    jl Less4
    je Len4
    iaddq $-2, %rdx
    jl Len5
    je Len6
    jmp Len7
Less4:
    iaddq $3, %rdx
    je Len1
    iaddq $-1, %rdx
    je Len2
    jg Len3
    jmp Done
Len7:
    mrmovq 48(%rdi), %r10 # read val from src...
    rmmovq %r10, 48(%rsi) # ...and store it to dst  
    andq %r10, %r10 # val <= 0?
    jle Len6
    iaddq $1, %rax 
Len6:
    mrmovq 40(%rdi), %r10 # read val from src...
    rmmovq %r10, 40(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Len5
    iaddq $1, %rax 
Len5:
    mrmovq 32(%rdi), %r10 # read val from src...
    rmmovq %r10, 32(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Len4
    iaddq $1, %rax 
Len4:
    mrmovq 24(%rdi), %r10 # read val from src...
    rmmovq %r10, 24(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Len3
    iaddq $1, %rax 
Len3:
    mrmovq 16(%rdi), %r10 # read val from src...
    rmmovq %r10, 16(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Len2
    iaddq $1, %rax 
Len2:
    mrmovq 8(%rdi), %r10 # read val from src...
    rmmovq %r10, 8(%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Len1
    iaddq $1, %rax 
Len1:
    mrmovq (%rdi), %r10 # read val from src...
    rmmovq %r10, (%rsi) # ...and store it to dst
    andq %r10, %r10 # val <= 0?
    jle Done
    iaddq $1, %rax 

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
